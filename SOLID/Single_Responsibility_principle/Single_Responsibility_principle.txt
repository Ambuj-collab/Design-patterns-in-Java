1) Single responsibility principle tells us that there should never be more than one reason for a class to change again. There should never be more than one reason for a class to change. A single responsibility means that the class provides a very focused functionality or it addresses a specific concern of our desired functionality. And this is what the single responsibility means.

2) Let's take an example. Let's say that we have written a code in single class and that code is actually creating and sending a message to a remote server that is listening on some port. Now, what are the possible reasons for this particular class to change? Well, since we have done a lot more in this single class, there are multiple reasons here. Let's say the communication protocol changes(HTTPS from HTTP) then our class needs to change. Let's say the message format(JSON from XML) changes. For example, let's say we were sending our message in a Json format and suddenly the server said, okay, we are going to accept only XML messages now. So our class again needs to change. That is the second reason. Or another reason could be that the parameters of communication, for example, authentication is added on the server side as a measure of security. So again, our class needs to change. So if you see, there are multiple reasons because of which our class or our code that is written in this class is going to change. And this is what we should avoid. This is what our single responsibility principle is saying to avoid.

3) It basically says that if we have three separate responsibilities, then we should have three separate classes or modules to handle those responsibilities. And that way, whenever something changes, our code can be changed in an organized manner. Okay, we are not going to go inside a huge method just because we want to change our message format from Json to XML. Okay, so this is what single responsibility means. It means that whenever you are designing a class or a module, you should take care that that particular class is addressing only a specific concern so that when time comes or a change comes down the pipeline, then there is only one reason for a particular class to change.

4) This principle said there should never be more than one reason for a class to change and we can achieve that or we can fulfill or satisfy this principle only if our class is actually providing a focused, specific single functionality.